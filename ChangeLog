Changes since release 1.5:
  T.S: 2011-08-04
  - Makefile.am: add rtems-gdb-stub.tex, LICENSE and legacy
    Makefile to EXTRA_DIST.
  T.S: 2011-03-21
  - Makefile.am: add *.diff to EXTRA_DIST (gdb patches)
  T.S: 2011-03-17
  - Makefile.am: add PDFS to EXTRA_DIST
  T.S: 2010-06-30
  - rtems-gdb-stub-m68k.c: Changed declaration of low-level
    exception handler to take a 'char' arg instead of 'int'
    in order to silence compiler warning (rtems-4.10) that
    we had violated the alias rule (which we really did).
  - rtems-stub.c: Silenced compiler warning (rtems-4.10) by
    including <unistd.h>.
  T.S: 2010-03-25
  - added patch for gdb-7.1: gdb-7.1-20100325.diff
  - added subsection to documentation discussing problems
    with GDB failing to locate source files (deleted temporary
    build dirs, relocated src/build dirs, GDB's 'substitute-path'
    feature.
  T.S: 2010-03-17
  - rtems-gdb-stub-m68k.c: REVERTED: declaration of argument
    to _m68k_gdb_exception_handler() and used the same way
    for _m68k_gdb_ret_to_thread(). I could not find any
    documentation describing the m68k ABI. Somehow calling
    C from assembly crashes unless we pass an 'int' take
    the address and cast to a struct pointer. This is most
    likely gcc dependent.
    Issue #warning about missing FP copy implementation only
	if compiling for a hard-float architecture.
  - rtems-gdb-stub.tex, rtems-stub.c: Disable stack-switcher
    and REDZONE; calling functions on the target is currently
    broken. This feature is also disabled in gdb itself
    by the latest patches (rtems-remote target only).
    Documented this change in manual.
  - Removed (partly broken) gdb patch 'gdb-6.8-20080730.diff'.
  - Added new patches for gdb-6.8 and gdb-7.0.1; they implement
    the following fixes:
      o disable 'push_dummy_call' ('call' command) on rtems-remote
        target.
      o cannot use print_section_info() to dump section info of
        object files. This routine only dumps the main executable
        regardless of the BFD passed in.
        Implemented our own version (sigh).
      o BUG (caused by cexpsh on target): if a section with
        SEC_ALLOC set has zero size then the target agent passes
        zero load address and this confuses gdb when it
        loads the corresponding object as a symbol file.
        Fixed cexp ignores such zero-sized sections completely
        (and supplies no section symbol for them anymore).
      o Setting 'main_name' during initialization is not good
        enough; we now register an 'observer' callback to 
        change 'main_name' every time a new (system) object
        is loaded.
      o Instead of checking the gdb target name use the configured
        target name to decide whether we are debugging rtems and
        should therefore not try to print the stacks of all threads
        ('info threads' command).

  T.S: 2010-01-12
  - rtems-gdb-stub-m68k.c: FIXED: declaration of argument to
    _m68k_gdb_exception_handler().
  - rtems-gdb-stub-i386.h: WORKAROUND/HACK: stack-switcher doesn't
    work for SSE yet. If compiled for __SSE__ then fall back to
    disabling the stack-switcher. This let's the code at least work
    most of the time (but it will crash horribly if the user tries
    to execute code on the target)
  - rtems-gdb-stub-ppc-shared.c: include <bsp/vectors.h> instead of
    deprecated <libcpu/raw_exception.h>.
  T.S: 2009-12-04
  - BUGFIX: 
	EXC_SRR0 _is_ already adjusted after hitting a hard breakpoint.
		n = f->EXC_SRR0;
		while ( hardbpt(f->EXC_SRR0) )
			f->EXC_SRR0+=4;
		if ( f->EXC_SRR0 != n )
			f->EXC_SRR0 = n; /* <<< This was BAD */
    
  T.S: 2009-08-06
  - rtems-gdb-stub.h: Added extern "C" linkage for C++ inclusion (Thanks to
      Daron Chabot).
  T.S: 2009-02-04
  - use TRAP 0 instead of SC for 'fixed', i.e., non-gdb managed breakpoints.
    Some firmware (e.g., psim) may already use SC.
Changes since release 1.4:
  T.S: 2008-07-30
  - removed patches for older gdbs (6.5, 6.4, 6.3, 6.2.1). Users should
    use a recent one.
  - updated patch for gdb-6.6 (make sure module symfiles appear before
    main symfile so that symbols from modules loaded into a memory
    region covered by the main executable are searched for in the module
    symfiles first).
  - added patch for gdb-6.8. This patch deprecates the NBSD core file support,
    sorry.
  T.S: 2008-07-26
  - PPC405 Support. Almost like BookE but the SPRs are different :-(.
  - clear DBCR0 in init (JTAG debugger might have enabled external mode).
  T.S: 2008-04-30
  - rtems-gdb-stub-m68k.c: fixed some compiler warnings (printf format
    types using inttypes.h. Unfortunately, rtems-4.7 uses 64-bit types
    for intptr_t so there remain ugly casts of void*->uint32_t.
  T.S: 2008-04-10
  - BookE single-stepping mode is different from classic PPC. Implemented
    (quick+dirty for now).
    FIXME: needs to be cleaned and unfortunately another RTEMS version check
    is required...
  T.S: 2008-03-20
  Fixes to let it build for different RTEMS versions (4.6.5 .. 4.8.99):
  - crc32.c  use 'uint32_t instead of 'unsigned long'
  - added version-check macro to rtems-stub.c; several features 
    (copying/retrieving object names) and data types (uint32_t, socklen_t,
    PRIx32 format) have changed over time.
  T.S: 2008-01-18
  - rtems-gdb-stub-ppc-shared.c: added check for _SOFT_FLOAT - don't access
    FP regs when compiled for arch that doesn't have any.
  - refuse to break if _Thread_Dispatch_disable_level > 0 (this covers the
    case of ISRs we had already protected against).
  - added support for UDP connections
  - allow 'ttyName' to be any type of device (not just termios). Silently
    ignore failure to read/change/reset termios settings.
  - now works nicely with lanIpBasic standalone IP/UDP stack :-)
Changes since release 1.3:
  T.S: 2007-07-19
  - fix false-positive i386 paranoia check (current CS must be equal to
    CS in exception frame must only compare lower 16-bits!)
  T.S: 2007-07-19
  - fixed printf format warnings by using inttypes.h / PRIx32 & friends
    rather than using explicit formats.
  T.S: 2006-11-30
  - fixed type-punning by using a union for sockaddr/sockaddr_in :(
  - fixed other compiler warnings (mostly printf format details).
  - replaced old rtems 'unsigned32' and similar types by stdint.
  T.S: 2006-08-11
  - BUGFIX: must release startup-synchronization semaphore prior to blocking for
    connections (Thanks to Keith Robertson for reporting this).
Changes since release 1.2:
  T.S: 2006/6/27
  - changed port number from 4444 (leftover from early development lazyness)
    to the officially registered 2159. Thanks to Wolfram Wadepohl for reporting
    this.
Changes since release 1.1:
  T.S: 2006/6/16:
  - switch_stack: free list pointer MUST be declared to point to ALIGNED structs
  - set serial port configuration to mirror what GDB does. This fixed a problem
    (uC5282) where everything seemed to work but binary \000 chars were dropped
    leading to weird memory corruption ('call/print' command). Apparently,
    the checksum algorithm doesn't catch that case!
  T.S: 2006/6/10:
  - m68k (coldfire/uC5282) port.
  T.S: 2005/12/14:
  - cexpSystemModule must be checked for NULL (compiled with cexp support
    but cexp not used).
  T.S: 2005/12/13:
  - fixed typo in i386 variant (must be rtems_gdb_tgt_dump_frame() )
Changes since release 1.0:
  T.S: 2005/12/1:
  - added arch specific routines to dump register/stack contents
    when a thread crashes.
  - removed 'obsolete i/o'.
  - bugfix: when re-attaching to a dead task, list corruption had
    occurred (eventual assertion failure). E.g., if thread 3 ran
    into a segmentation violation then a 't 3, cont, Ctrl-C, t 3'
    sequence would trigger the behavior).
  - a few documentation fixes.
  - updated GDB patches; added patch for gdb-6.3.
  T.S: 2005/11/13:
  - silenced compiler warnings by explicitely casting signed/unsigned
    char types where necessary.
  - bugfix in 'binary memory write [X]': had incremented (*ptr)++
    instead of *(ptr++).
  - abandoned use of _Objects_Copy_name_string() (API changed in 4.6.99;
    to be compatible, we always use _Objects_Copy_name_raw()).
